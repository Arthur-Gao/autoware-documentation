{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Autoware Documentation # Warning Under Construction About Autoware # Autoware is the world\u2019s leading open-source software project for autonomous driving. Autoware is built on Robot Operating System (ROS) and enables commercial deployment of autonomous driving in a broad range of vehicles and applications. Please see here for more details. Getting started # Installation Tutorials How-to guides Design Contributing Help","title":"Introduction"},{"location":"#autoware-documentation","text":"Warning Under Construction","title":"Autoware Documentation"},{"location":"#about-autoware","text":"Autoware is the world\u2019s leading open-source software project for autonomous driving. Autoware is built on Robot Operating System (ROS) and enables commercial deployment of autonomous driving in a broad range of vehicles and applications. Please see here for more details.","title":"About Autoware"},{"location":"#getting-started","text":"Installation Tutorials How-to guides Design Contributing Help","title":"Getting started"},{"location":"contributing/","text":"Contributing # Warning Under Construction Contribution workflows # Issues # Discussions # Small pull requests # Large pull requests #","title":"Contributing"},{"location":"contributing/#contributing","text":"Warning Under Construction","title":"Contributing"},{"location":"contributing/#contribution-workflows","text":"","title":"Contribution workflows"},{"location":"contributing/#issues","text":"","title":"Issues"},{"location":"contributing/#discussions","text":"","title":"Discussions"},{"location":"contributing/#small-pull-requests","text":"","title":"Small pull requests"},{"location":"contributing/#large-pull-requests","text":"","title":"Large pull requests"},{"location":"contributing/coding-guidelines/","text":"Coding guidelines # Warning Under Construction Common guidelines #","title":"Coding guidelines"},{"location":"contributing/coding-guidelines/#coding-guidelines","text":"Warning Under Construction","title":"Coding guidelines"},{"location":"contributing/coding-guidelines/#common-guidelines","text":"","title":"Common guidelines"},{"location":"contributing/coding-guidelines/languages/","text":"Language-specific coding guidelines # Warning Under Construction","title":"Language-specific coding guidelines"},{"location":"contributing/coding-guidelines/languages/#language-specific-coding-guidelines","text":"Warning Under Construction","title":"Language-specific coding guidelines"},{"location":"contributing/coding-guidelines/languages/cmake/","text":"CMake # Warning Under Construction","title":"CMake"},{"location":"contributing/coding-guidelines/languages/cmake/#cmake","text":"Warning Under Construction","title":"CMake"},{"location":"contributing/coding-guidelines/languages/cpp/","text":"C++ # Warning Under Construction","title":"C++"},{"location":"contributing/coding-guidelines/languages/cpp/#c","text":"Warning Under Construction","title":"C++"},{"location":"contributing/coding-guidelines/languages/docker/","text":"Docker # Warning Under Construction","title":"Docker"},{"location":"contributing/coding-guidelines/languages/docker/#docker","text":"Warning Under Construction","title":"Docker"},{"location":"contributing/coding-guidelines/languages/github-actions/","text":"GitHub Actions # Warning Under Construction","title":"GitHub Actions"},{"location":"contributing/coding-guidelines/languages/github-actions/#github-actions","text":"Warning Under Construction","title":"GitHub Actions"},{"location":"contributing/coding-guidelines/languages/markdown/","text":"Markdown # Warning Under Construction","title":"Markdown"},{"location":"contributing/coding-guidelines/languages/markdown/#markdown","text":"Warning Under Construction","title":"Markdown"},{"location":"contributing/coding-guidelines/languages/package-xml/","text":"package.xml # Warning Under Construction","title":"package.xml"},{"location":"contributing/coding-guidelines/languages/package-xml/#packagexml","text":"Warning Under Construction","title":"package.xml"},{"location":"contributing/coding-guidelines/languages/python/","text":"Python # Warning Under Construction","title":"Python"},{"location":"contributing/coding-guidelines/languages/python/#python","text":"Warning Under Construction","title":"Python"},{"location":"contributing/coding-guidelines/languages/ros2-interfaces/","text":"ROS 2 interfaces # Warning Under Construction","title":"ROS 2 interfaces"},{"location":"contributing/coding-guidelines/languages/ros2-interfaces/#ros-2-interfaces","text":"Warning Under Construction","title":"ROS 2 interfaces"},{"location":"contributing/coding-guidelines/languages/shell-scripts/","text":"Shell scripts # Warning Under Construction","title":"Shell scripts"},{"location":"contributing/coding-guidelines/languages/shell-scripts/#shell-scripts","text":"Warning Under Construction","title":"Shell scripts"},{"location":"contributing/coding-guidelines/ros-nodes/","text":"ROS nodes coding guidelines # Warning Under Construction","title":"ROS nodes coding guidelines"},{"location":"contributing/coding-guidelines/ros-nodes/#ros-nodes-coding-guidelines","text":"Warning Under Construction","title":"ROS nodes coding guidelines"},{"location":"contributing/coding-guidelines/ros-nodes/class-design/","text":"Class design # Warning Under Construction","title":"Class design"},{"location":"contributing/coding-guidelines/ros-nodes/class-design/#class-design","text":"Warning Under Construction","title":"Class design"},{"location":"contributing/coding-guidelines/ros-nodes/console-logging/","text":"Console logging # Warning Under Construction","title":"Console logging"},{"location":"contributing/coding-guidelines/ros-nodes/console-logging/#console-logging","text":"Warning Under Construction","title":"Console logging"},{"location":"contributing/coding-guidelines/ros-nodes/coordinate-system/","text":"Coordinate system # Warning Under Construction","title":"Coordinate system"},{"location":"contributing/coding-guidelines/ros-nodes/coordinate-system/#coordinate-system","text":"Warning Under Construction","title":"Coordinate system"},{"location":"contributing/coding-guidelines/ros-nodes/directory-structure/","text":"Directory structure # Warning Under Construction","title":"Directory structure"},{"location":"contributing/coding-guidelines/ros-nodes/directory-structure/#directory-structure","text":"Warning Under Construction","title":"Directory structure"},{"location":"contributing/coding-guidelines/ros-nodes/launch-files/","text":"Launch files # Warning Under Construction","title":"Launch files"},{"location":"contributing/coding-guidelines/ros-nodes/launch-files/#launch-files","text":"Warning Under Construction","title":"Launch files"},{"location":"contributing/coding-guidelines/ros-nodes/naming/","text":"Topic namespaces # Warning Under Construction","title":"Topic namespaces"},{"location":"contributing/coding-guidelines/ros-nodes/naming/#topic-namespaces","text":"Warning Under Construction","title":"Topic namespaces"},{"location":"contributing/coding-guidelines/ros-nodes/parameters/","text":"Parameters # Warning Under Construction","title":"Parameters"},{"location":"contributing/coding-guidelines/ros-nodes/parameters/#parameters","text":"Warning Under Construction","title":"Parameters"},{"location":"contributing/coding-guidelines/ros-nodes/task-scheduling/","text":"Task scheduling # Warning Under Construction","title":"Task scheduling"},{"location":"contributing/coding-guidelines/ros-nodes/task-scheduling/#task-scheduling","text":"Warning Under Construction","title":"Task scheduling"},{"location":"contributing/coding-guidelines/ros-nodes/topic-namespaces/","text":"Topic namespaces # Warning Under Construction","title":"Topic namespaces"},{"location":"contributing/coding-guidelines/ros-nodes/topic-namespaces/#topic-namespaces","text":"Warning Under Construction","title":"Topic namespaces"},{"location":"contributing/discussion-guidelines/","text":"Discussion guidelines # Warning Under Construction","title":"Discussion guidelines"},{"location":"contributing/discussion-guidelines/#discussion-guidelines","text":"Warning Under Construction","title":"Discussion guidelines"},{"location":"contributing/documentation-guidelines/","text":"Documentation guidelines # Warning Under Construction","title":"Documentation guidelines"},{"location":"contributing/documentation-guidelines/#documentation-guidelines","text":"Warning Under Construction","title":"Documentation guidelines"},{"location":"contributing/pull-request-guidelines/","text":"Pull request guidelines # Warning Under Construction","title":"Pull request guidelines"},{"location":"contributing/pull-request-guidelines/#pull-request-guidelines","text":"Warning Under Construction","title":"Pull request guidelines"},{"location":"contributing/testing-guidelines/","text":"Testing guidelines # Warning Under Construction","title":"Testing guidelines"},{"location":"contributing/testing-guidelines/#testing-guidelines","text":"Warning Under Construction","title":"Testing guidelines"},{"location":"design/","text":"Design # Warning Under Construction Component interfaces # AD API # Configuration management #","title":"Design"},{"location":"design/#design","text":"Warning Under Construction","title":"Design"},{"location":"design/#component-interfaces","text":"","title":"Component interfaces"},{"location":"design/#ad-api","text":"","title":"AD API"},{"location":"design/#configuration-management","text":"","title":"Configuration management"},{"location":"design/ad-api/","text":"AD API # Warning Under Construction","title":"AD API"},{"location":"design/ad-api/#ad-api","text":"Warning Under Construction","title":"AD API"},{"location":"design/component-interfaces/","text":"Component interfaces # Warning Under Construction","title":"Component interfaces"},{"location":"design/component-interfaces/#component-interfaces","text":"Warning Under Construction","title":"Component interfaces"},{"location":"design/configuration-management/","text":"Configuration management # Warning Under Construction","title":"Configuration management"},{"location":"design/configuration-management/#configuration-management","text":"Warning Under Construction","title":"Configuration management"},{"location":"design/configuration-management/development-process/","text":"Development process # Warning Under Construction","title":"Development process"},{"location":"design/configuration-management/development-process/#development-process","text":"Warning Under Construction","title":"Development process"},{"location":"design/configuration-management/release-process/","text":"Release process # Warning Under Construction","title":"Release process"},{"location":"design/configuration-management/release-process/#release-process","text":"Warning Under Construction","title":"Release process"},{"location":"design/configuration-management/repository-structure/","text":"Repository structure # Warning Under Construction","title":"Repository structure"},{"location":"design/configuration-management/repository-structure/#repository-structure","text":"Warning Under Construction","title":"Repository structure"},{"location":"help/","text":"Help # Warning Under Construction","title":"Help"},{"location":"help/#help","text":"Warning Under Construction","title":"Help"},{"location":"help/docs-guide/","text":"Docs guide # Warning Under Construction This page explains documentations sites that are useful for Autoware and ROS development. The Autoware Foundation # Autoware Documentation (this site) # Autoware Universe Documentation # ROS Docs Guide #","title":"Docs guide"},{"location":"help/docs-guide/#docs-guide","text":"Warning Under Construction This page explains documentations sites that are useful for Autoware and ROS development.","title":"Docs guide"},{"location":"help/docs-guide/#the-autoware-foundation","text":"","title":"The Autoware Foundation"},{"location":"help/docs-guide/#autoware-documentation-this-site","text":"","title":"Autoware Documentation (this site)"},{"location":"help/docs-guide/#autoware-universe-documentation","text":"","title":"Autoware Universe Documentation"},{"location":"help/docs-guide/#ros-docs-guide","text":"","title":"ROS Docs Guide"},{"location":"help/support-guidelines/","text":"Support guidelines # Warning Under Construction","title":"Support guidelines"},{"location":"help/support-guidelines/#support-guidelines","text":"Warning Under Construction","title":"Support guidelines"},{"location":"how-to-guides/","text":"How-to guides # Warning Under Construction Write an Autoware package Add a message Debug Autoware Integrate Autoware with a real vehicle etc.","title":"How-to guides"},{"location":"how-to-guides/#how-to-guides","text":"Warning Under Construction Write an Autoware package Add a message Debug Autoware Integrate Autoware with a real vehicle etc.","title":"How-to guides"},{"location":"installation/","text":"Installation # Target platforms # Autoware targets the platforms listed below. It may change in future versions of Autoware. The Autoware Foundation provides no support on other platforms than those listed below. Architecture # amd64 arm64 ROS version # ROS 2 Galactic ( active development ) ROS 2 Humble ( will be supported in 2022 ) Refer to REP-2000 for the system dependencies. Installation steps of Autoware # See here for how to install Autoware. Installation steps of tools for users # Some other tools are required depending on the evaluation you want to do. For example, if you run E2E simulation, you need to install a simulator for that. See here for how to install the tools. Installation steps of tools for developers # There are also tools and settings for developers, such as Shells or IDEs. See here for how to install the tools.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#target-platforms","text":"Autoware targets the platforms listed below. It may change in future versions of Autoware. The Autoware Foundation provides no support on other platforms than those listed below.","title":"Target platforms"},{"location":"installation/#architecture","text":"amd64 arm64","title":"Architecture"},{"location":"installation/#ros-version","text":"ROS 2 Galactic ( active development ) ROS 2 Humble ( will be supported in 2022 ) Refer to REP-2000 for the system dependencies.","title":"ROS version"},{"location":"installation/#installation-steps-of-autoware","text":"See here for how to install Autoware.","title":"Installation steps of Autoware"},{"location":"installation/#installation-steps-of-tools-for-users","text":"Some other tools are required depending on the evaluation you want to do. For example, if you run E2E simulation, you need to install a simulator for that. See here for how to install the tools.","title":"Installation steps of tools for users"},{"location":"installation/#installation-steps-of-tools-for-developers","text":"There are also tools and settings for developers, such as Shells or IDEs. See here for how to install the tools.","title":"Installation steps of tools for developers"},{"location":"installation/autoware/","text":"Installation of Autoware # There are two ways to set up Autoware. Choose one according to your preference. 1. Docker installation # Docker can ensure that all developers in a project have a common, consistent development environment. It is recommended for beginners, light users, people who do not use Ubuntu. See here for the detailed steps. 2. Source installation # Source installation is for the cases where more granular control of the installation environment is needed. It is recommended for skilled users or people who want to customize the environment. Note that some problems may occur depending on your local environment. See here for the detailed steps.","title":"Installation of Autoware"},{"location":"installation/autoware/#installation-of-autoware","text":"There are two ways to set up Autoware. Choose one according to your preference.","title":"Installation of Autoware"},{"location":"installation/autoware/#1-docker-installation","text":"Docker can ensure that all developers in a project have a common, consistent development environment. It is recommended for beginners, light users, people who do not use Ubuntu. See here for the detailed steps.","title":"1. Docker installation"},{"location":"installation/autoware/#2-source-installation","text":"Source installation is for the cases where more granular control of the installation environment is needed. It is recommended for skilled users or people who want to customize the environment. Note that some problems may occur depending on your local environment. See here for the detailed steps.","title":"2. Source installation"},{"location":"installation/autoware/docker-installation/","text":"Docker installation # Info Since this page explains Docker-specific information, it is recommended to see Source installation as well if you need detailed information. Prerequisites # Git How to set up a development environment # Clone autowarefoundation/autoware and move to the directory. git clone https://github.com/autowarefoundation/autoware.git Install the dependencies. ./setup-dev-env.sh docker How to set up a workspace # Launch a Docker container rocker --nvidia --x11 --user --volume $HOME /autoware -- ghcr.io/autowarefoundation/autoware-universe:latest See here for more advanced usage. After that, move to the workspace in the container: cd autoware Create the src directory and clone repositories into it. mkdir src vcs import src < autoware.repos Build the workspace. colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release How to update a workspace # Update the Docker image. docker pull ghcr.io/autowarefoundation/autoware-universe:latest rocker --nvidia --x11 --user --volume $HOME /autoware -- ghcr.io/autowarefoundation/autoware-universe:latest Update the .repos file. cd autoware git pull Update the repositories. vcs import src < autoware.repos vcs pull Build the workspace. colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release Troubleshooting # Here are solutions for a few specific errors: cuda error: forward compatibility was attempted on non supported hw # When starting Docker with GPU support enabled for NVIDIA graphics, you may sometimes receive the following error: docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused \"process_linux.go:449: container init caused \\\"process_linux.go:432: running prestart hook 0 caused \\\\\\\"error running hook: exit status 1, stdout: , stderr: nvidia-container-cli: initialization error: cuda error: forward compatibility was attempted on non supported hw\\\\\\\\n\\\\\\\"\\\"\" : unknown. ERROR: Command return non-zero exit code ( see above ) : 125 This usually indicates that a new NVIDIA graphics driver has been installed (usually via apt ) but the system has not yet been restarted. A similar message may appear if the graphics driver is not available, for example because of resuming after suspend. To fix this, restart your system after installing the new NVIDIA driver. Tips # Non-native arm64 System # This section describes a process to run arm64 systems on amd64 systems using qemu-user-static . Initially, your system is usually incompatible with arm64 systems. To check that: $ docker run --rm -t arm64v8/ubuntu uname -m WARNING: The requested image's platform (linux/arm64/v8) does not match the detected host platform (linux/amd64) and no specific platform was requested standard_init_linux.go:228: exec user process caused: exec format error Installing qemu-user-static enables us to run arm64 images on amd64 systems. $ sudo apt-get install qemu-user-static $ docker run --rm --privileged multiarch/qemu-user-static --reset -p yes $ docker run --rm -t arm64v8/ubuntu uname -m WARNING: The requested image's platform (linux/arm64/v8) does not match the detected host platform (linux/amd64) and no specific platform was requested aarch64 To run specify arm64 architecture for Autoware's Docker images, add the suffix -arm64 . $ docker run --rm -it ghcr.io/autowarefoundation/autoware-universe:latest-arm64 WARNING: The requested image's platform (linux/arm64) does not match the detected host platform (linux/amd64) and no specific platform was requested root@5b71391ad50f:/autoware#","title":"Docker installation"},{"location":"installation/autoware/docker-installation/#docker-installation","text":"Info Since this page explains Docker-specific information, it is recommended to see Source installation as well if you need detailed information.","title":"Docker installation"},{"location":"installation/autoware/docker-installation/#prerequisites","text":"Git","title":"Prerequisites"},{"location":"installation/autoware/docker-installation/#how-to-set-up-a-development-environment","text":"Clone autowarefoundation/autoware and move to the directory. git clone https://github.com/autowarefoundation/autoware.git Install the dependencies. ./setup-dev-env.sh docker","title":"How to set up a development environment"},{"location":"installation/autoware/docker-installation/#how-to-set-up-a-workspace","text":"Launch a Docker container rocker --nvidia --x11 --user --volume $HOME /autoware -- ghcr.io/autowarefoundation/autoware-universe:latest See here for more advanced usage. After that, move to the workspace in the container: cd autoware Create the src directory and clone repositories into it. mkdir src vcs import src < autoware.repos Build the workspace. colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release","title":"How to set up a workspace"},{"location":"installation/autoware/docker-installation/#how-to-update-a-workspace","text":"Update the Docker image. docker pull ghcr.io/autowarefoundation/autoware-universe:latest rocker --nvidia --x11 --user --volume $HOME /autoware -- ghcr.io/autowarefoundation/autoware-universe:latest Update the .repos file. cd autoware git pull Update the repositories. vcs import src < autoware.repos vcs pull Build the workspace. colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release","title":"How to update a workspace"},{"location":"installation/autoware/docker-installation/#troubleshooting","text":"Here are solutions for a few specific errors:","title":"Troubleshooting"},{"location":"installation/autoware/docker-installation/#cuda-error-forward-compatibility-was-attempted-on-non-supported-hw","text":"When starting Docker with GPU support enabled for NVIDIA graphics, you may sometimes receive the following error: docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused \"process_linux.go:449: container init caused \\\"process_linux.go:432: running prestart hook 0 caused \\\\\\\"error running hook: exit status 1, stdout: , stderr: nvidia-container-cli: initialization error: cuda error: forward compatibility was attempted on non supported hw\\\\\\\\n\\\\\\\"\\\"\" : unknown. ERROR: Command return non-zero exit code ( see above ) : 125 This usually indicates that a new NVIDIA graphics driver has been installed (usually via apt ) but the system has not yet been restarted. A similar message may appear if the graphics driver is not available, for example because of resuming after suspend. To fix this, restart your system after installing the new NVIDIA driver.","title":"cuda error: forward compatibility was attempted on non supported hw"},{"location":"installation/autoware/docker-installation/#tips","text":"","title":"Tips"},{"location":"installation/autoware/docker-installation/#non-native-arm64-system","text":"This section describes a process to run arm64 systems on amd64 systems using qemu-user-static . Initially, your system is usually incompatible with arm64 systems. To check that: $ docker run --rm -t arm64v8/ubuntu uname -m WARNING: The requested image's platform (linux/arm64/v8) does not match the detected host platform (linux/amd64) and no specific platform was requested standard_init_linux.go:228: exec user process caused: exec format error Installing qemu-user-static enables us to run arm64 images on amd64 systems. $ sudo apt-get install qemu-user-static $ docker run --rm --privileged multiarch/qemu-user-static --reset -p yes $ docker run --rm -t arm64v8/ubuntu uname -m WARNING: The requested image's platform (linux/arm64/v8) does not match the detected host platform (linux/amd64) and no specific platform was requested aarch64 To run specify arm64 architecture for Autoware's Docker images, add the suffix -arm64 . $ docker run --rm -it ghcr.io/autowarefoundation/autoware-universe:latest-arm64 WARNING: The requested image's platform (linux/arm64) does not match the detected host platform (linux/amd64) and no specific platform was requested root@5b71391ad50f:/autoware#","title":"Non-native arm64 System"},{"location":"installation/autoware/source-installation/","text":"Source installation # Prerequisites # Ubuntu 20.04 Git Registering SSH keys to GitHub is preferable. sudo apt-get -y update sudo apt-get -y install git How to set up a development environment # Clone autowarefoundation/autoware and move to the directory. git clone https://github.com/autowarefoundation/autoware.git cd autoware Install the dependencies. We use Ansible to simplify the steps. Please see the Ansible playbooks and roles if you want to know exactly what packages are installed. Note: Before installing NVIDIA libraries, confirm and agree with the licenses. CUDA cuDNN TensorRT ./setup-dev-env.sh How to set up a workspace # Create the src directory and clone repositories into it. Autoware uses vcstool to construct workspaces. cd autoware mkdir src vcs import src < autoware.repos Install dependent ROS packages. Autoware requires some ROS 2 packages in addition to the core components. The tool rosdep allows an automatic search and installation of such dependencies. source /opt/ros/galactic/setup.bash rosdep install --from-paths src --ignore-src --rosdistro $ROS_DISTRO Build the workspace. Autoware uses colcon to build workspaces. Refer to the documentation for more advanced options. colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release How to update a workspace # Update the .repos file. cd autoware git pull Update the repositories. vcs import src < autoware.repos vcs pull For Git users: vcs import is similar to git checkout . Note that it doesn't pull from the remote. vcs pull is similar to git pull . Note that it doesn't switch branches. Refer to the official documentation for more information. Install dependent ROS packages. source /opt/ros/galactic/setup.bash rosdep install --from-paths src --ignore-src --rosdistro $ROS_DISTRO Build the workspace. colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release","title":"Source installation"},{"location":"installation/autoware/source-installation/#source-installation","text":"","title":"Source installation"},{"location":"installation/autoware/source-installation/#prerequisites","text":"Ubuntu 20.04 Git Registering SSH keys to GitHub is preferable. sudo apt-get -y update sudo apt-get -y install git","title":"Prerequisites"},{"location":"installation/autoware/source-installation/#how-to-set-up-a-development-environment","text":"Clone autowarefoundation/autoware and move to the directory. git clone https://github.com/autowarefoundation/autoware.git cd autoware Install the dependencies. We use Ansible to simplify the steps. Please see the Ansible playbooks and roles if you want to know exactly what packages are installed. Note: Before installing NVIDIA libraries, confirm and agree with the licenses. CUDA cuDNN TensorRT ./setup-dev-env.sh","title":"How to set up a development environment"},{"location":"installation/autoware/source-installation/#how-to-set-up-a-workspace","text":"Create the src directory and clone repositories into it. Autoware uses vcstool to construct workspaces. cd autoware mkdir src vcs import src < autoware.repos Install dependent ROS packages. Autoware requires some ROS 2 packages in addition to the core components. The tool rosdep allows an automatic search and installation of such dependencies. source /opt/ros/galactic/setup.bash rosdep install --from-paths src --ignore-src --rosdistro $ROS_DISTRO Build the workspace. Autoware uses colcon to build workspaces. Refer to the documentation for more advanced options. colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release","title":"How to set up a workspace"},{"location":"installation/autoware/source-installation/#how-to-update-a-workspace","text":"Update the .repos file. cd autoware git pull Update the repositories. vcs import src < autoware.repos vcs pull For Git users: vcs import is similar to git checkout . Note that it doesn't pull from the remote. vcs pull is similar to git pull . Note that it doesn't switch branches. Refer to the official documentation for more information. Install dependent ROS packages. source /opt/ros/galactic/setup.bash rosdep install --from-paths src --ignore-src --rosdistro $ROS_DISTRO Build the workspace. colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release","title":"How to update a workspace"},{"location":"installation/tools-for-developers/","text":"Installation of tools for developers # ROS 2 settings # Colorizing logger output # By default, ROS 2 logger doesn't colorize the output. To colorize it, write the following in your .bashrc : export RCUTILS_COLORIZED_OUTPUT = 1 Customizing the format of logger output # By default, ROS 2 logger doesn't output detailed information such as file name, function name, or line number. To customize it, write the following in your .bashrc : export RCUTILS_CONSOLE_OUTPUT_FORMAT = \"[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})\" See here for more options. Enabling localhost-only communication # By default, ROS 2 communicates using multi-cast, which may unnecessarily increase the network traffic. To avoid it, write the following in your .bashrc : export ROS_LOCALHOST_ONLY = 1 Setting up ROS_DOMAIN_ID # ROS 2 uses ROS_DOMAIN_ID to create groups and communicate between machines in the groups. Since all ROS 2 nodes use domain ID 0 by default, it may cause unintended interference. To avoid it, set a different domain ID for each group in your .bashrc : # Replace X with the Domain ID you want to use # Domain ID should be a number in range [0, 101] (inclusive) export ROS_DOMAIN_ID = X See here for more information.","title":"Installation of tools for developers"},{"location":"installation/tools-for-developers/#installation-of-tools-for-developers","text":"","title":"Installation of tools for developers"},{"location":"installation/tools-for-developers/#ros-2-settings","text":"","title":"ROS 2 settings"},{"location":"installation/tools-for-developers/#colorizing-logger-output","text":"By default, ROS 2 logger doesn't colorize the output. To colorize it, write the following in your .bashrc : export RCUTILS_COLORIZED_OUTPUT = 1","title":"Colorizing logger output"},{"location":"installation/tools-for-developers/#customizing-the-format-of-logger-output","text":"By default, ROS 2 logger doesn't output detailed information such as file name, function name, or line number. To customize it, write the following in your .bashrc : export RCUTILS_CONSOLE_OUTPUT_FORMAT = \"[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})\" See here for more options.","title":"Customizing the format of logger output"},{"location":"installation/tools-for-developers/#enabling-localhost-only-communication","text":"By default, ROS 2 communicates using multi-cast, which may unnecessarily increase the network traffic. To avoid it, write the following in your .bashrc : export ROS_LOCALHOST_ONLY = 1","title":"Enabling localhost-only communication"},{"location":"installation/tools-for-developers/#setting-up-ros_domain_id","text":"ROS 2 uses ROS_DOMAIN_ID to create groups and communicate between machines in the groups. Since all ROS 2 nodes use domain ID 0 by default, it may cause unintended interference. To avoid it, set a different domain ID for each group in your .bashrc : # Replace X with the Domain ID you want to use # Domain ID should be a number in range [0, 101] (inclusive) export ROS_DOMAIN_ID = X See here for more information.","title":"Setting up ROS_DOMAIN_ID"},{"location":"installation/tools-for-users/","text":"Installation of tools for users # Warning Under Construction","title":"Installation of tools for users"},{"location":"installation/tools-for-users/#installation-of-tools-for-users","text":"Warning Under Construction","title":"Installation of tools for users"},{"location":"tutorials/","text":"Tutorials # Warning Under Construction Simulation methods # Local simulation # Scenario simulation # Simulation types # Closed-loop # Open-loop # E2E #","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"Warning Under Construction","title":"Tutorials"},{"location":"tutorials/#simulation-methods","text":"","title":"Simulation methods"},{"location":"tutorials/#local-simulation","text":"","title":"Local simulation"},{"location":"tutorials/#scenario-simulation","text":"","title":"Scenario simulation"},{"location":"tutorials/#simulation-types","text":"","title":"Simulation types"},{"location":"tutorials/#closed-loop","text":"","title":"Closed-loop"},{"location":"tutorials/#open-loop","text":"","title":"Open-loop"},{"location":"tutorials/#e2e","text":"","title":"E2E"},{"location":"tutorials/local-simulation/","text":"Local simulation # Warning Under Construction","title":"Local simulation"},{"location":"tutorials/local-simulation/#local-simulation","text":"Warning Under Construction","title":"Local simulation"},{"location":"tutorials/local-simulation/closed-loop-simulation/","text":"Closed-loop simulation # Warning Under Construction","title":"Closed-loop simulation"},{"location":"tutorials/local-simulation/closed-loop-simulation/#closed-loop-simulation","text":"Warning Under Construction","title":"Closed-loop simulation"},{"location":"tutorials/local-simulation/e2e-simulation/","text":"E2E simulation # Warning Under Construction","title":"E2E simulation"},{"location":"tutorials/local-simulation/e2e-simulation/#e2e-simulation","text":"Warning Under Construction","title":"E2E simulation"},{"location":"tutorials/local-simulation/open-loop-simulation/","text":"Open loop simulation # Warning Under Construction","title":"Open loop simulation"},{"location":"tutorials/local-simulation/open-loop-simulation/#open-loop-simulation","text":"Warning Under Construction","title":"Open loop simulation"},{"location":"tutorials/scenario-simulation/","text":"Scenario simulation # Warning Under Construction","title":"Scenario simulation"},{"location":"tutorials/scenario-simulation/#scenario-simulation","text":"Warning Under Construction","title":"Scenario simulation"},{"location":"tutorials/scenario-simulation/closed-loop-simulation/","text":"Closed loop simulation # Warning Under Construction","title":"Closed loop simulation"},{"location":"tutorials/scenario-simulation/closed-loop-simulation/#closed-loop-simulation","text":"Warning Under Construction","title":"Closed loop simulation"},{"location":"tutorials/scenario-simulation/e2e-simulation/","text":"E2E simulation # Warning Under Construction","title":"E2E simulation"},{"location":"tutorials/scenario-simulation/e2e-simulation/#e2e-simulation","text":"Warning Under Construction","title":"E2E simulation"},{"location":"tutorials/scenario-simulation/open-loop-simulation/","text":"Open loop simulation # Warning Under Construction","title":"Open loop simulation"},{"location":"tutorials/scenario-simulation/open-loop-simulation/#open-loop-simulation","text":"Warning Under Construction","title":"Open loop simulation"}]}