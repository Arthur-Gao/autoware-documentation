{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Autoware Documentation # Warning Under Construction About Autoware # Autoware is the world\u2019s leading open-source software project for autonomous driving. Autoware is built on Robot Operating System (ROS) and enables commercial deployment of autonomous driving in a broad range of vehicles and applications. Please see here for more details. Getting started # Installation Tutorials How-to guides Design Contributing Help","title":"Introduction"},{"location":"#autoware-documentation","text":"Warning Under Construction","title":"Autoware Documentation"},{"location":"#about-autoware","text":"Autoware is the world\u2019s leading open-source software project for autonomous driving. Autoware is built on Robot Operating System (ROS) and enables commercial deployment of autonomous driving in a broad range of vehicles and applications. Please see here for more details.","title":"About Autoware"},{"location":"#getting-started","text":"Installation Tutorials How-to guides Design Contributing Help","title":"Getting started"},{"location":"contributing/","text":"Contributing # This page explains how to contribute to Autoware. First, conform to the Code of conduct section for the general manners in contributions. See the Contribution workflows section for the workflows. Also, make sure the contribution is in line with the following guidelines: Coding guidelines : for contributing source code Testing guidelines : for contributing tests Documentation guidelines : for contributing documents Pull request guidelines : for submitting pull requests Discussion guidelines : for discussing with other contributors Support guidelines : for finding the right channel when you need help It is recommended to read the Contributing pages in ROS 2 Docs as well because Autoware's guidelines generally depend on them. For general information about OSS contributions, Open Source Guides by GitHub is a good resource. Info If you want to make changes to the guidelines in this documentation site, you can open a new discussion thread and propose it. Code of conduct # We welcome contributions from everyone. To ensure our community stays open and healthy, we adhere to the Contributor Covenant , a widely used code of conduct adopted by many other communities listed here . Everyone participating in the Autoware community is expected to follow the code of conduct. If someone in the community happens to be violating these terms, let the maintainers know, and we will address it as soon as possible. Warning Note that contributions that ignore guidelines are not contributions but nuisances. Contribution workflows # There are several types of contributions and the workflows differ between the types. See the description for your contribution type. Discussions # You can contribute to Autoware by facilitating discussions: Find a bug and open a new issue. Propose an idea of features that will enhance Autoware. Join an existing discussion and express your opinion. Organize discussions for other contributors. Answer questions and support other contributors. See our support guidelines for the detailed steps. Pull requests # You can submit a pull request directly (without opening an issue) if it is small like the following: Update a small part of documents. Fix spelling mistakes. Fix CI failures. Fix warnings detected by compilers or analysis tools. Make small changes to a single package. Otherwise, create an issue or a discussion thread before submitting a pull request and discuss the approach with maintainers. Also, regardless of the size of your pull request, follow the pull request template of the target repository. See our pull request guidelines for the detailed steps.","title":"Contributing"},{"location":"contributing/#contributing","text":"This page explains how to contribute to Autoware. First, conform to the Code of conduct section for the general manners in contributions. See the Contribution workflows section for the workflows. Also, make sure the contribution is in line with the following guidelines: Coding guidelines : for contributing source code Testing guidelines : for contributing tests Documentation guidelines : for contributing documents Pull request guidelines : for submitting pull requests Discussion guidelines : for discussing with other contributors Support guidelines : for finding the right channel when you need help It is recommended to read the Contributing pages in ROS 2 Docs as well because Autoware's guidelines generally depend on them. For general information about OSS contributions, Open Source Guides by GitHub is a good resource. Info If you want to make changes to the guidelines in this documentation site, you can open a new discussion thread and propose it.","title":"Contributing"},{"location":"contributing/#code-of-conduct","text":"We welcome contributions from everyone. To ensure our community stays open and healthy, we adhere to the Contributor Covenant , a widely used code of conduct adopted by many other communities listed here . Everyone participating in the Autoware community is expected to follow the code of conduct. If someone in the community happens to be violating these terms, let the maintainers know, and we will address it as soon as possible. Warning Note that contributions that ignore guidelines are not contributions but nuisances.","title":"Code of conduct"},{"location":"contributing/#contribution-workflows","text":"There are several types of contributions and the workflows differ between the types. See the description for your contribution type.","title":"Contribution workflows"},{"location":"contributing/#discussions","text":"You can contribute to Autoware by facilitating discussions: Find a bug and open a new issue. Propose an idea of features that will enhance Autoware. Join an existing discussion and express your opinion. Organize discussions for other contributors. Answer questions and support other contributors. See our support guidelines for the detailed steps.","title":"Discussions"},{"location":"contributing/#pull-requests","text":"You can submit a pull request directly (without opening an issue) if it is small like the following: Update a small part of documents. Fix spelling mistakes. Fix CI failures. Fix warnings detected by compilers or analysis tools. Make small changes to a single package. Otherwise, create an issue or a discussion thread before submitting a pull request and discuss the approach with maintainers. Also, regardless of the size of your pull request, follow the pull request template of the target repository. See our pull request guidelines for the detailed steps.","title":"Pull requests"},{"location":"contributing/coding-guidelines/","text":"Coding guidelines # Warning Under Construction Common guidelines #","title":"Coding guidelines"},{"location":"contributing/coding-guidelines/#coding-guidelines","text":"Warning Under Construction","title":"Coding guidelines"},{"location":"contributing/coding-guidelines/#common-guidelines","text":"","title":"Common guidelines"},{"location":"contributing/coding-guidelines/languages/","text":"Language-specific coding guidelines # Warning Under Construction","title":"Language-specific coding guidelines"},{"location":"contributing/coding-guidelines/languages/#language-specific-coding-guidelines","text":"Warning Under Construction","title":"Language-specific coding guidelines"},{"location":"contributing/coding-guidelines/languages/cmake/","text":"CMake # Warning Under Construction","title":"CMake"},{"location":"contributing/coding-guidelines/languages/cmake/#cmake","text":"Warning Under Construction","title":"CMake"},{"location":"contributing/coding-guidelines/languages/cpp/","text":"C++ # Warning Under Construction","title":"C++"},{"location":"contributing/coding-guidelines/languages/cpp/#c","text":"Warning Under Construction","title":"C++"},{"location":"contributing/coding-guidelines/languages/docker/","text":"Docker # Warning Under Construction","title":"Docker"},{"location":"contributing/coding-guidelines/languages/docker/#docker","text":"Warning Under Construction","title":"Docker"},{"location":"contributing/coding-guidelines/languages/github-actions/","text":"GitHub Actions # Warning Under Construction","title":"GitHub Actions"},{"location":"contributing/coding-guidelines/languages/github-actions/#github-actions","text":"Warning Under Construction","title":"GitHub Actions"},{"location":"contributing/coding-guidelines/languages/markdown/","text":"Markdown # Warning Under Construction","title":"Markdown"},{"location":"contributing/coding-guidelines/languages/markdown/#markdown","text":"Warning Under Construction","title":"Markdown"},{"location":"contributing/coding-guidelines/languages/package-xml/","text":"package.xml # Warning Under Construction","title":"package.xml"},{"location":"contributing/coding-guidelines/languages/package-xml/#packagexml","text":"Warning Under Construction","title":"package.xml"},{"location":"contributing/coding-guidelines/languages/python/","text":"Python # Warning Under Construction","title":"Python"},{"location":"contributing/coding-guidelines/languages/python/#python","text":"Warning Under Construction","title":"Python"},{"location":"contributing/coding-guidelines/languages/ros2-interfaces/","text":"ROS 2 interfaces # Warning Under Construction","title":"ROS 2 interfaces"},{"location":"contributing/coding-guidelines/languages/ros2-interfaces/#ros-2-interfaces","text":"Warning Under Construction","title":"ROS 2 interfaces"},{"location":"contributing/coding-guidelines/languages/shell-scripts/","text":"Shell scripts # Warning Under Construction","title":"Shell scripts"},{"location":"contributing/coding-guidelines/languages/shell-scripts/#shell-scripts","text":"Warning Under Construction","title":"Shell scripts"},{"location":"contributing/coding-guidelines/ros-nodes/","text":"ROS nodes coding guidelines # Warning Under Construction","title":"ROS nodes coding guidelines"},{"location":"contributing/coding-guidelines/ros-nodes/#ros-nodes-coding-guidelines","text":"Warning Under Construction","title":"ROS nodes coding guidelines"},{"location":"contributing/coding-guidelines/ros-nodes/class-design/","text":"Class design # Warning Under Construction","title":"Class design"},{"location":"contributing/coding-guidelines/ros-nodes/class-design/#class-design","text":"Warning Under Construction","title":"Class design"},{"location":"contributing/coding-guidelines/ros-nodes/console-logging/","text":"Console logging # Warning Under Construction","title":"Console logging"},{"location":"contributing/coding-guidelines/ros-nodes/console-logging/#console-logging","text":"Warning Under Construction","title":"Console logging"},{"location":"contributing/coding-guidelines/ros-nodes/coordinate-system/","text":"Coordinate system # Warning Under Construction","title":"Coordinate system"},{"location":"contributing/coding-guidelines/ros-nodes/coordinate-system/#coordinate-system","text":"Warning Under Construction","title":"Coordinate system"},{"location":"contributing/coding-guidelines/ros-nodes/directory-structure/","text":"Directory structure # Warning Under Construction","title":"Directory structure"},{"location":"contributing/coding-guidelines/ros-nodes/directory-structure/#directory-structure","text":"Warning Under Construction","title":"Directory structure"},{"location":"contributing/coding-guidelines/ros-nodes/launch-files/","text":"Launch files # Warning Under Construction","title":"Launch files"},{"location":"contributing/coding-guidelines/ros-nodes/launch-files/#launch-files","text":"Warning Under Construction","title":"Launch files"},{"location":"contributing/coding-guidelines/ros-nodes/naming/","text":"Topic namespaces # Warning Under Construction","title":"Topic namespaces"},{"location":"contributing/coding-guidelines/ros-nodes/naming/#topic-namespaces","text":"Warning Under Construction","title":"Topic namespaces"},{"location":"contributing/coding-guidelines/ros-nodes/parameters/","text":"Parameters # Warning Under Construction","title":"Parameters"},{"location":"contributing/coding-guidelines/ros-nodes/parameters/#parameters","text":"Warning Under Construction","title":"Parameters"},{"location":"contributing/coding-guidelines/ros-nodes/task-scheduling/","text":"Task scheduling # Warning Under Construction","title":"Task scheduling"},{"location":"contributing/coding-guidelines/ros-nodes/task-scheduling/#task-scheduling","text":"Warning Under Construction","title":"Task scheduling"},{"location":"contributing/coding-guidelines/ros-nodes/topic-namespaces/","text":"Topic namespaces # Warning Under Construction","title":"Topic namespaces"},{"location":"contributing/coding-guidelines/ros-nodes/topic-namespaces/#topic-namespaces","text":"Warning Under Construction","title":"Topic namespaces"},{"location":"contributing/discussion-guidelines/","text":"Discussion guidelines # Warning Under Construction","title":"Discussion guidelines"},{"location":"contributing/discussion-guidelines/#discussion-guidelines","text":"Warning Under Construction","title":"Discussion guidelines"},{"location":"contributing/documentation-guidelines/","text":"Documentation guidelines # Warning Under Construction","title":"Documentation guidelines"},{"location":"contributing/documentation-guidelines/#documentation-guidelines","text":"Warning Under Construction","title":"Documentation guidelines"},{"location":"contributing/pull-request-guidelines/","text":"Pull request guidelines # General pull request workflow # Autoware uses the fork-and-pull model. Refer to GitHub Docs for the detailed explanation of the model. The following is a general example of our pull request workflow. Create a fork. (for the first time only) Create an issue. Discuss the approach to the issue with maintainers. Write code in the agreed approach. Write the tests and documentation if necessary. Follow our guidelines when you write code, tests, and documentation. Coding guidelines Testing guidelines Documentation guidelines Follow our Commit guidelines when commit your change. Test the code. In the later review process, you will need to write what tests you have done. Create a pull request. Read the pull request template carefully and fill the required content. Assign reviewers after creating a pull request. If you have no rights to assign reviewers, just mention them instead. If you are not sure who to set reviewers, contact to the people written as the maintainer tag in package.xml . Wait for the pull request to be reviewed. The reviewers will review your code following our review guidelines . Take a look at the guidelines as well because it is good to understand the thoughts of the reviewer's side. If CI checks have failed, fix the errors. Address the review comments pointed out by the reviewers. If you cannot understand or agree with a review comment, discuss it with the reviewers and find a rational reason. The author should be responsible for the final content of their pull request. The reviewers are obligated to make the author understand the meanings of each comment. After you have done with them, re-request a review to the reviewers and back to 6. If there are no more new review comments, the reviewers will approve the pull request and go to 6. Merge the pull request. Confirm all items of the checklist are checked off before merging. Anyone with write access can merge the pull request if there is no special request from maintainers. Generally, the author is expected to merge it to feel responsible for their pull request. If the author does not have write access, ask the reviewers or maintainers. It is the author's responsibility to care about their own pull request until it is merged. CI checks # Autoware has several checks for a pull request. The results are shown at the bottom of the pull request page as below. If the \u274c mark is shown, click the Details button and investigate the failure reason. If the Required mark is shown, you cannot merge the pull request unless you resolve the error. If not, it is optional, but preferably it should be fixed. The following sections explain about common CI checks in Autoware. Note that some repositories may have different settings. DCO # The Developer Certificate of Origin (DCO) is a lightweight way for contributors to certify that they wrote or otherwise have the right to submit the code they are contributing to the project. This workflow checks whether the pull request fulfills DCO . You need to confirm the required items and commit with git commit -s . Refer to the GitHub App page for more information. semantic-pull-request # Autoware uses Conventional Commits with the settings of commitizen/conventional-commit-types . This workflow checks whether the pull request follows Conventional Commits . Note that if there is only one commit in the pull request, you need to make the commit title semantic as well. This is due to GitHub's non-intuitive behavior when there is only one commit. GitHub uses the commit title for the squashed commit message, instead of the pull request title. Refer to amannn/action-semantic-pull-request for more detailed behaviors of this workflow. See our commit guidelines for the detailed rules. pre-commit # pre-commit is a tool to run formatters or linters when you commit. This workflow checks whether the pull request has no error with pre-commit . In the workflow pre-commit.ci - pr is enabled in the repository, it will automatically fix errors by pre-commit.ci as many as possible. If there are some errors remain, fix them manually. You can run pre-commit in your local environment by the following command: pre-commit run -a Or you can install pre-commit to the repository and automatically run it before committing: pre-commit install Since it is difficult to detect errors with no false positives, some jobs are split into another config file and marked as optional. To check them, use the --config option: pre-commit run -a --config .pre-commit-config-optional.yaml spell-check-differential # This workflow detects spelling mistakes using CSpell with our dictionary file . You can submit pull requests to tier4/autoware-spell-check-dict to update the dictionary. Since it is difficult to detect errors with no false positives, it is an optional workflow, but it is preferable to remove spelling mistakes as many as possible. build-and-test-differential # This workflow checks colcon build and colcon test for the pull request. To make the CI faster, it doesn't check all packages but only modified packages and the dependencies. build-and-test-differential-self-hosted # This workflow is the ARM64 version of build-and-test-differential . You need to add the ARM64 label to run this workflow. For reference information, since ARM machines are not supported by GitHub-hosted runners, we use self-hosted runners prepared by the AWF. Refer to GitHub Docs for the details about self-hosted runners. deploy-docs # This workflow deploys the preview documentation site for the pull request. You need to add the documentation label to run this workflow.","title":"Pull request guidelines"},{"location":"contributing/pull-request-guidelines/#pull-request-guidelines","text":"","title":"Pull request guidelines"},{"location":"contributing/pull-request-guidelines/#general-pull-request-workflow","text":"Autoware uses the fork-and-pull model. Refer to GitHub Docs for the detailed explanation of the model. The following is a general example of our pull request workflow. Create a fork. (for the first time only) Create an issue. Discuss the approach to the issue with maintainers. Write code in the agreed approach. Write the tests and documentation if necessary. Follow our guidelines when you write code, tests, and documentation. Coding guidelines Testing guidelines Documentation guidelines Follow our Commit guidelines when commit your change. Test the code. In the later review process, you will need to write what tests you have done. Create a pull request. Read the pull request template carefully and fill the required content. Assign reviewers after creating a pull request. If you have no rights to assign reviewers, just mention them instead. If you are not sure who to set reviewers, contact to the people written as the maintainer tag in package.xml . Wait for the pull request to be reviewed. The reviewers will review your code following our review guidelines . Take a look at the guidelines as well because it is good to understand the thoughts of the reviewer's side. If CI checks have failed, fix the errors. Address the review comments pointed out by the reviewers. If you cannot understand or agree with a review comment, discuss it with the reviewers and find a rational reason. The author should be responsible for the final content of their pull request. The reviewers are obligated to make the author understand the meanings of each comment. After you have done with them, re-request a review to the reviewers and back to 6. If there are no more new review comments, the reviewers will approve the pull request and go to 6. Merge the pull request. Confirm all items of the checklist are checked off before merging. Anyone with write access can merge the pull request if there is no special request from maintainers. Generally, the author is expected to merge it to feel responsible for their pull request. If the author does not have write access, ask the reviewers or maintainers. It is the author's responsibility to care about their own pull request until it is merged.","title":"General pull request workflow"},{"location":"contributing/pull-request-guidelines/#ci-checks","text":"Autoware has several checks for a pull request. The results are shown at the bottom of the pull request page as below. If the \u274c mark is shown, click the Details button and investigate the failure reason. If the Required mark is shown, you cannot merge the pull request unless you resolve the error. If not, it is optional, but preferably it should be fixed. The following sections explain about common CI checks in Autoware. Note that some repositories may have different settings.","title":"CI checks"},{"location":"contributing/pull-request-guidelines/#dco","text":"The Developer Certificate of Origin (DCO) is a lightweight way for contributors to certify that they wrote or otherwise have the right to submit the code they are contributing to the project. This workflow checks whether the pull request fulfills DCO . You need to confirm the required items and commit with git commit -s . Refer to the GitHub App page for more information.","title":"DCO"},{"location":"contributing/pull-request-guidelines/#semantic-pull-request","text":"Autoware uses Conventional Commits with the settings of commitizen/conventional-commit-types . This workflow checks whether the pull request follows Conventional Commits . Note that if there is only one commit in the pull request, you need to make the commit title semantic as well. This is due to GitHub's non-intuitive behavior when there is only one commit. GitHub uses the commit title for the squashed commit message, instead of the pull request title. Refer to amannn/action-semantic-pull-request for more detailed behaviors of this workflow. See our commit guidelines for the detailed rules.","title":"semantic-pull-request"},{"location":"contributing/pull-request-guidelines/#pre-commit","text":"pre-commit is a tool to run formatters or linters when you commit. This workflow checks whether the pull request has no error with pre-commit . In the workflow pre-commit.ci - pr is enabled in the repository, it will automatically fix errors by pre-commit.ci as many as possible. If there are some errors remain, fix them manually. You can run pre-commit in your local environment by the following command: pre-commit run -a Or you can install pre-commit to the repository and automatically run it before committing: pre-commit install Since it is difficult to detect errors with no false positives, some jobs are split into another config file and marked as optional. To check them, use the --config option: pre-commit run -a --config .pre-commit-config-optional.yaml","title":"pre-commit"},{"location":"contributing/pull-request-guidelines/#spell-check-differential","text":"This workflow detects spelling mistakes using CSpell with our dictionary file . You can submit pull requests to tier4/autoware-spell-check-dict to update the dictionary. Since it is difficult to detect errors with no false positives, it is an optional workflow, but it is preferable to remove spelling mistakes as many as possible.","title":"spell-check-differential"},{"location":"contributing/pull-request-guidelines/#build-and-test-differential","text":"This workflow checks colcon build and colcon test for the pull request. To make the CI faster, it doesn't check all packages but only modified packages and the dependencies.","title":"build-and-test-differential"},{"location":"contributing/pull-request-guidelines/#build-and-test-differential-self-hosted","text":"This workflow is the ARM64 version of build-and-test-differential . You need to add the ARM64 label to run this workflow. For reference information, since ARM machines are not supported by GitHub-hosted runners, we use self-hosted runners prepared by the AWF. Refer to GitHub Docs for the details about self-hosted runners.","title":"build-and-test-differential-self-hosted"},{"location":"contributing/pull-request-guidelines/#deploy-docs","text":"This workflow deploys the preview documentation site for the pull request. You need to add the documentation label to run this workflow.","title":"deploy-docs"},{"location":"contributing/testing-guidelines/","text":"Testing guidelines # Warning Under Construction","title":"Testing guidelines"},{"location":"contributing/testing-guidelines/#testing-guidelines","text":"Warning Under Construction","title":"Testing guidelines"},{"location":"design/","text":"Design # Warning Under Construction Component interfaces # AD API # Configuration management #","title":"Design"},{"location":"design/#design","text":"Warning Under Construction","title":"Design"},{"location":"design/#component-interfaces","text":"","title":"Component interfaces"},{"location":"design/#ad-api","text":"","title":"AD API"},{"location":"design/#configuration-management","text":"","title":"Configuration management"},{"location":"design/ad-api/","text":"AD API # Warning Under Construction","title":"AD API"},{"location":"design/ad-api/#ad-api","text":"Warning Under Construction","title":"AD API"},{"location":"design/component-interfaces/","text":"Component interfaces # Warning Under Construction","title":"Component interfaces"},{"location":"design/component-interfaces/#component-interfaces","text":"Warning Under Construction","title":"Component interfaces"},{"location":"design/configuration-management/","text":"Configuration management # Warning Under Construction","title":"Configuration management"},{"location":"design/configuration-management/#configuration-management","text":"Warning Under Construction","title":"Configuration management"},{"location":"design/configuration-management/development-process/","text":"Development process # Warning Under Construction","title":"Development process"},{"location":"design/configuration-management/development-process/#development-process","text":"Warning Under Construction","title":"Development process"},{"location":"design/configuration-management/release-process/","text":"Release process # Warning Under Construction","title":"Release process"},{"location":"design/configuration-management/release-process/#release-process","text":"Warning Under Construction","title":"Release process"},{"location":"design/configuration-management/repository-structure/","text":"Repository structure # Warning Under Construction","title":"Repository structure"},{"location":"design/configuration-management/repository-structure/#repository-structure","text":"Warning Under Construction","title":"Repository structure"},{"location":"help/","text":"Help # Warning Under Construction","title":"Help"},{"location":"help/#help","text":"Warning Under Construction","title":"Help"},{"location":"help/docs-guide/","text":"Docs guide # Warning Under Construction This page explains several documentation sites that are useful for Autoware and ROS development. The Autoware Foundation # Autoware Documentation (this site) # Autoware Universe Documentation # ROS Docs Guide #","title":"Docs guide"},{"location":"help/docs-guide/#docs-guide","text":"Warning Under Construction This page explains several documentation sites that are useful for Autoware and ROS development.","title":"Docs guide"},{"location":"help/docs-guide/#the-autoware-foundation","text":"","title":"The Autoware Foundation"},{"location":"help/docs-guide/#autoware-documentation-this-site","text":"","title":"Autoware Documentation (this site)"},{"location":"help/docs-guide/#autoware-universe-documentation","text":"","title":"Autoware Universe Documentation"},{"location":"help/docs-guide/#ros-docs-guide","text":"","title":"ROS Docs Guide"},{"location":"help/support-guidelines/","text":"Support guidelines # This page explains the support mechanisms we provide. Warning Before asking for help, search and read this documentation site carefully. Also, understand and follow our discussion guidelines during your discussions. Choose appropriate resources depending on what kind of help you need: Documentation sites Various information GitHub Discussions Questions Unconfirmed bugs Feature requests Design discussions GitHub Issues Confirmed bugs Slack Instant messaging between contributors ROS Discourse General topics that should be widely announced The following sections are detailed descriptions of each resource. Documentation sites # Docs guide shows the list of useful documentation sites. Visit them and see if there is any information related to your problem. Note that the documentation sites aren't always up-to-date and perfect. If you find some information is wrong, unclear, or missing in Autoware docs, feel free to submit a pull request following our contribution guidelines . Warning Since this documentation site is still under construction, there are some empty pages. GitHub Discussions # If you have a problem with Autoware, check existing issues and questions and search similar issues first. Issues Note that Autoware has multiple repositories listed in autoware.repos . It is recommended to search across the repositories. Questions If no answer was found, create a new question thread here . If your question is not answered in a timely manner (about a week), mention maintainers and remind them. Also, there are other discussion types such as feature requests or design discussions . Feel free to open or join such discussions. GitHub Issues # If you have a problem and you have confirmed it is a bug, find the appropriate repository and create a new issue there. If you can't determine the appropriate repository, you should not create an issue yet. Warning Do not create issues for questions or unconfirmed bugs. If such issues are created, maintainers will transfer them to GitHub Discussions. If you want to fix the bug by yourself, discuss the approach with maintainers and submit a pull request. Slack # Autoware has a Slack workspace for casual communication between contributors. For example, this is a good place for the following activities: Introduce yourself to the community. Chat with contributors. Take a quick straw poll. Note that it is not the right place to get help for your issues. ROS Discourse # If you want to widely discuss a topic with the general Autoware community or ask a question not related to Autoware's bugs, post to the Autoware category on ROS Discourse . Warning Do not post questions about bugs to ROS Discourse!","title":"Support guidelines"},{"location":"help/support-guidelines/#support-guidelines","text":"This page explains the support mechanisms we provide. Warning Before asking for help, search and read this documentation site carefully. Also, understand and follow our discussion guidelines during your discussions. Choose appropriate resources depending on what kind of help you need: Documentation sites Various information GitHub Discussions Questions Unconfirmed bugs Feature requests Design discussions GitHub Issues Confirmed bugs Slack Instant messaging between contributors ROS Discourse General topics that should be widely announced The following sections are detailed descriptions of each resource.","title":"Support guidelines"},{"location":"help/support-guidelines/#documentation-sites","text":"Docs guide shows the list of useful documentation sites. Visit them and see if there is any information related to your problem. Note that the documentation sites aren't always up-to-date and perfect. If you find some information is wrong, unclear, or missing in Autoware docs, feel free to submit a pull request following our contribution guidelines . Warning Since this documentation site is still under construction, there are some empty pages.","title":"Documentation sites"},{"location":"help/support-guidelines/#github-discussions","text":"If you have a problem with Autoware, check existing issues and questions and search similar issues first. Issues Note that Autoware has multiple repositories listed in autoware.repos . It is recommended to search across the repositories. Questions If no answer was found, create a new question thread here . If your question is not answered in a timely manner (about a week), mention maintainers and remind them. Also, there are other discussion types such as feature requests or design discussions . Feel free to open or join such discussions.","title":"GitHub Discussions"},{"location":"help/support-guidelines/#github-issues","text":"If you have a problem and you have confirmed it is a bug, find the appropriate repository and create a new issue there. If you can't determine the appropriate repository, you should not create an issue yet. Warning Do not create issues for questions or unconfirmed bugs. If such issues are created, maintainers will transfer them to GitHub Discussions. If you want to fix the bug by yourself, discuss the approach with maintainers and submit a pull request.","title":"GitHub Issues"},{"location":"help/support-guidelines/#slack","text":"Autoware has a Slack workspace for casual communication between contributors. For example, this is a good place for the following activities: Introduce yourself to the community. Chat with contributors. Take a quick straw poll. Note that it is not the right place to get help for your issues.","title":"Slack"},{"location":"help/support-guidelines/#ros-discourse","text":"If you want to widely discuss a topic with the general Autoware community or ask a question not related to Autoware's bugs, post to the Autoware category on ROS Discourse . Warning Do not post questions about bugs to ROS Discourse!","title":"ROS Discourse"},{"location":"how-to-guides/","text":"How-to guides # Warning Under Construction Write an Autoware package Add a message Debug Autoware Integrate Autoware with a real vehicle etc.","title":"How-to guides"},{"location":"how-to-guides/#how-to-guides","text":"Warning Under Construction Write an Autoware package Add a message Debug Autoware Integrate Autoware with a real vehicle etc.","title":"How-to guides"},{"location":"installation/","text":"Installation # Warning Under Construction Supported platforms #","title":"Installation"},{"location":"installation/#installation","text":"Warning Under Construction","title":"Installation"},{"location":"installation/#supported-platforms","text":"","title":"Supported platforms"},{"location":"installation/autoware/","text":"Installation of Autoware # Warning Under Construction","title":"Installation of Autoware"},{"location":"installation/autoware/#installation-of-autoware","text":"Warning Under Construction","title":"Installation of Autoware"},{"location":"installation/autoware/docker-installation/","text":"Docker installation # Warning Under Construction","title":"Docker installation"},{"location":"installation/autoware/docker-installation/#docker-installation","text":"Warning Under Construction","title":"Docker installation"},{"location":"installation/autoware/local-installation/","text":"Local installation # Warning Under Construction","title":"Local installation"},{"location":"installation/autoware/local-installation/#local-installation","text":"Warning Under Construction","title":"Local installation"},{"location":"installation/tools-for-developers/","text":"Installation of tools for developers # Warning Under Construction","title":"Installation of tools for developers"},{"location":"installation/tools-for-developers/#installation-of-tools-for-developers","text":"Warning Under Construction","title":"Installation of tools for developers"},{"location":"installation/tools-for-users/","text":"Installation of tools for users # Warning Under Construction","title":"Installation of tools for users"},{"location":"installation/tools-for-users/#installation-of-tools-for-users","text":"Warning Under Construction","title":"Installation of tools for users"},{"location":"tutorials/","text":"Tutorials # This page explains how to try out Autoware through simulations. There are some methods and types of simulations. Read the following sections and choose a simulation method/type you want See the left sidebar for how to run each simulation. Warning The namings of each simulation are under discussion and would be changed in the near future. Simulation methods # Ad hoc simulation # Ad hoc simulation is a simulation method that you run simulations flexibly on your local machine. It is recommended for your first trial. Scenario simulation # Scenario simulation is a simulation method that a scenario runner runs simulations based on scenarios you defined. It is often run automatically on a CI system, but you can also run this simulation on your local machine. Simulation types # Autoware supports three types of simulations. Note that it is just a rough classification, and that there are several minor derivative versions. Planning simulation # Planning simulation is a simulation type that uses simple dummy data and tests mainly planning/control components. Rosbag replay simulation # Rosbag replay simulation is a simulation type that uses Rosbag data and tests mainly perception modules. Sometimes it is used for endurance tests by repeatedly playing back the data. Digital twin simulation # Digital twin simulation is a simulation type that produces realistic data and simulate almost the entire system.","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"This page explains how to try out Autoware through simulations. There are some methods and types of simulations. Read the following sections and choose a simulation method/type you want See the left sidebar for how to run each simulation. Warning The namings of each simulation are under discussion and would be changed in the near future.","title":"Tutorials"},{"location":"tutorials/#simulation-methods","text":"","title":"Simulation methods"},{"location":"tutorials/#ad-hoc-simulation","text":"Ad hoc simulation is a simulation method that you run simulations flexibly on your local machine. It is recommended for your first trial.","title":"Ad hoc simulation"},{"location":"tutorials/#scenario-simulation","text":"Scenario simulation is a simulation method that a scenario runner runs simulations based on scenarios you defined. It is often run automatically on a CI system, but you can also run this simulation on your local machine.","title":"Scenario simulation"},{"location":"tutorials/#simulation-types","text":"Autoware supports three types of simulations. Note that it is just a rough classification, and that there are several minor derivative versions.","title":"Simulation types"},{"location":"tutorials/#planning-simulation","text":"Planning simulation is a simulation type that uses simple dummy data and tests mainly planning/control components.","title":"Planning simulation"},{"location":"tutorials/#rosbag-replay-simulation","text":"Rosbag replay simulation is a simulation type that uses Rosbag data and tests mainly perception modules. Sometimes it is used for endurance tests by repeatedly playing back the data.","title":"Rosbag replay simulation"},{"location":"tutorials/#digital-twin-simulation","text":"Digital twin simulation is a simulation type that produces realistic data and simulate almost the entire system.","title":"Digital twin simulation"},{"location":"tutorials/ad-hoc-simulation/","text":"Ad hoc simulation # Warning Under Construction","title":"Ad hoc simulation"},{"location":"tutorials/ad-hoc-simulation/#ad-hoc-simulation","text":"Warning Under Construction","title":"Ad hoc simulation"},{"location":"tutorials/ad-hoc-simulation/digital-twin-simulation/","text":"Digital twin simulation # Warning Under Construction","title":"Digital twin simulation"},{"location":"tutorials/ad-hoc-simulation/digital-twin-simulation/#digital-twin-simulation","text":"Warning Under Construction","title":"Digital twin simulation"},{"location":"tutorials/ad-hoc-simulation/planning-simulation/","text":"Planning simulation # Warning Under Construction","title":"Planning simulation"},{"location":"tutorials/ad-hoc-simulation/planning-simulation/#planning-simulation","text":"Warning Under Construction","title":"Planning simulation"},{"location":"tutorials/ad-hoc-simulation/rosbag-replay-simulation/","text":"Rosbag replay simulation # Warning Under Construction","title":"Rosbag replay simulation"},{"location":"tutorials/ad-hoc-simulation/rosbag-replay-simulation/#rosbag-replay-simulation","text":"Warning Under Construction","title":"Rosbag replay simulation"},{"location":"tutorials/scenario-simulation/","text":"Scenario simulation # Warning Under Construction","title":"Scenario simulation"},{"location":"tutorials/scenario-simulation/#scenario-simulation","text":"Warning Under Construction","title":"Scenario simulation"},{"location":"tutorials/scenario-simulation/digital-twin-simulation/","text":"Digital twin simulation # Warning Under Construction","title":"Digital twin simulation"},{"location":"tutorials/scenario-simulation/digital-twin-simulation/#digital-twin-simulation","text":"Warning Under Construction","title":"Digital twin simulation"},{"location":"tutorials/scenario-simulation/planning-simulation/","text":"Planning simulation # Warning Under Construction","title":"Planning simulation"},{"location":"tutorials/scenario-simulation/planning-simulation/#planning-simulation","text":"Warning Under Construction","title":"Planning simulation"},{"location":"tutorials/scenario-simulation/rosbag-replay-simulation/","text":"Rosbag replay simulation # Warning Under Construction","title":"Rosbag replay simulation"},{"location":"tutorials/scenario-simulation/rosbag-replay-simulation/#rosbag-replay-simulation","text":"Warning Under Construction","title":"Rosbag replay simulation"}]}